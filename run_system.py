#!/usr/bin/env python3
import subprocess
import time
import os
import yaml
import asyncio
from pathlib import Path
from mavsdk import System
from src.simulator.px4_launcher import start_px4_instances
import socket

# === MQTT ===
def ensure_mqtt():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –±—Ä–æ–∫–µ—Ä MQTT, –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    host = "127.0.0.1"
    port = 1883

    def is_port_open(host, port):
        try:
            with socket.create_connection((host, port), timeout=1):
                return True
        except OSError:
            return False

    print("üîå –ü—Ä–æ–≤–µ—Ä—è–µ–º MQTT –±—Ä–æ–∫–µ—Ä...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±—Ä–æ–∫–µ—Ä
    if is_port_open(host, port):
        print(f"‚úÖ MQTT –±—Ä–æ–∫–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ {host}:{port}")
        return

    print("‚öôÔ∏è  MQTT –±—Ä–æ–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ...")
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º Mosquitto –∫–∞–∫ —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        subprocess.Popen(
            ["mosquitto", "-v"],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
        )
        time.sleep(1)

        if is_port_open(host, port):
            print(f"‚úÖ MQTT –±—Ä–æ–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ ({host}:{port})")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π MQTT –±—Ä–æ–∫–µ—Ä. –ü—Ä–æ–≤–µ—Ä—å —É—Å—Ç–∞–Ω–æ–≤–∫—É Mosquitto.")
            print("   –ü–æ–¥—Å–∫–∞–∑–∫–∞: brew install mosquitto")
    except FileNotFoundError:
        print("‚ùå Mosquitto –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏ —á–µ—Ä–µ–∑ Homebrew: brew install mosquitto")


# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ MAVSDK –∫ PX4 ===
async def connect_to_px4(drone_id: int, port: int, timeout: int = 120):
    drone = System()
    addr = f"udp://:{port}"
    print(f"[MAVSDK-{drone_id}] ‚è≥ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PX4 —á–µ—Ä–µ–∑ {addr} (–æ–∂–∏–¥–∞–Ω–∏–µ –¥–æ {timeout} —Å)...")
    await drone.connect(system_address=addr)

    start = time.time()
    while True:
        async for state in drone.core.connection_state():
            if state.is_connected:
                print(f"[MAVSDK-{drone_id}] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PX4!")
                return drone
        if time.time() - start > timeout:
            raise TimeoutError(f"[MAVSDK-{drone_id}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PX4 –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(1)


# === –ó–∞–ø—É—Å–∫ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ ===
def run_component(name: str, cmd: list[str], cwd: str | None = None):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞–∫ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å —Å –≤–∏–¥–∏–º—ã–º –ª–æ–≥–æ–º"""
    print(f"‚ñ∂Ô∏è  {name}: {' '.join(cmd)} (cwd={cwd or os.getcwd()})")
    #log_path = Path(f"{name.lower().replace(' ', '_')}.log")
    return subprocess.Popen(
        cmd,
        cwd=cwd,
        #stdout=open(log_path, "w"),
        stderr=subprocess.STDOUT,
        text=True
    )

'''
def run_component(name: str, cmd: list[str], cwd: str | None = None):
    print(f"‚ñ∂Ô∏è  {name}: {' '.join(cmd)} (cwd={cwd or os.getcwd()})")
    proc = subprocess.Popen(
        cmd,
        cwd=cwd,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True
    )
    # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
    try:
        for _ in range(10):
            line = proc.stdout.readline()
            if not line:
                break
            print(f"[{name}] {line.strip()}")
    except Exception as e:
        print(f"[{name}] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è stdout: {e}")
    return proc
'''

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def start_all():
    base_dir = Path(__file__).resolve().parent
    cfg_path = base_dir / "src/simulator/config.yaml"
    cfg = yaml.safe_load(cfg_path.read_text())

    ensure_mqtt()

    # 1Ô∏è‚É£ –ó–∞–ø—É—Å–∫ PX4 –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ MAVLink
    procs = await start_px4_instances(cfg)

    # 2Ô∏è‚É£ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MAVSDK –∫–æ –≤—Å–µ–º PX4
    print("\nüïπÔ∏è  –ü–æ–¥–∫–ª—é—á–∞–µ–º MAVSDK –∫–æ –≤—Å–µ–º PX4-–¥—Ä–æ–Ω–∞–º...")
    tasks = []
    for d in cfg["drones"]:
        port = d["mavlink_out"]
        tasks.append(connect_to_px4(d["id"], port, timeout=120))

    # –∂–¥—ë–º, –ø–æ–∫–∞ –≤—Å–µ –¥—Ä–æ–Ω—ã –ø–æ–¥–∫–ª—é—á–∞—Ç—Å—è
    drones = await asyncio.gather(*tasks)
    print("‚úÖ –í—Å–µ MAVSDK-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

    # ‚ñ∂Ô∏è  MAVSDK Bridge ‚Äî –ø—É–±–ª–∏–∫—É–µ—Ç —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é PX4 ‚Üí MQTT
    print("‚ñ∂Ô∏è  MAVSDK Bridge: python -m simulator.mavsdk_bridge")
    mavsdk_bridge = run_component(
        "MAVSDK Bridge",
        ["python", "-m", "simulator.mavsdk_bridge"],
        cwd="src"
    )

    # 3Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    print("‚ñ∂Ô∏è  Telemetry Ingest: python -m drone_core.workers.telemetry_ingest")
    telemetry = run_component("Telemetry Ingest", ["python", "-m", "drone_core.workers.telemetry_ingest"], cwd="src")

    print("‚ñ∂Ô∏è  Orchestrator: python -m drone_core.workers.orchestrator")
    orchestrator = run_component("Orchestrator", ["python", "-m", "drone_core.workers.orchestrator"], cwd="src")

    print("‚ñ∂Ô∏è  Web UI: uvicorn web_ui.main:app --port 8000")
    web_ui = run_component(
        "Web UI",
        ["uvicorn", "web_ui.main:app", "--port", "8000", "--reload", "--log-level", "debug"],
        cwd="src"
    )

    print("\nüöÄ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã!")
    print("–û—Ç–∫—Ä–æ–π UI ‚Üí http://127.0.0.1:8000/static/index.html")

    try:
        while True:
            await asyncio.sleep(1)
    except KeyboardInterrupt:
        print("\nüßπ –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...")
    finally:
        all_procs = [telemetry, orchestrator, web_ui, mavsdk_bridge, *procs]
        for p in all_procs:
            if p and p.poll() is None:
                p.terminate()
        time.sleep(2)
        for p in all_procs:
            if p and p.poll() is None:
                p.kill()
        os.system("pkill -f px4 > /dev/null 2>&1")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –≤—Å–µ PX4-–ø—Ä–æ—Ü–µ—Å—Å—ã —É–±–∏—Ç—ã.")


if __name__ == "__main__":
    asyncio.run(start_all())
