#!/usr/bin/env python3
import subprocess
import time
import os
import yaml
import asyncio
from pathlib import Path
from mavsdk import System
from src.simulator.px4_launcher import start_px4_instances


# === MQTT ===
def ensure_mqtt():
    print("üîå –ü—Ä–æ–≤–µ—Ä—è–µ–º MQTT –±—Ä–æ–∫–µ—Ä...")
    os.system("docker rm -f mosquitto-local > /dev/null 2>&1")
    os.system("docker run -d --name mosquitto-local -p 1883:1883 eclipse-mosquitto:2")
    print("‚úÖ MQTT –±—Ä–æ–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω (eclipse-mosquitto:2)")


# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ MAVSDK –∫ PX4 ===
async def connect_to_px4(drone_id: int, port: int, timeout: int = 120):
    drone = System()
    addr = f"udp://:{port}"
    print(f"[MAVSDK-{drone_id}] ‚è≥ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PX4 —á–µ—Ä–µ–∑ {addr} (–æ–∂–∏–¥–∞–Ω–∏–µ –¥–æ {timeout} —Å)...")
    await drone.connect(system_address=addr)

    start = time.time()
    while True:
        async for state in drone.core.connection_state():
            if state.is_connected:
                print(f"[MAVSDK-{drone_id}] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PX4!")
                return drone
        if time.time() - start > timeout:
            raise TimeoutError(f"[MAVSDK-{drone_id}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PX4 –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(1)


# === –ó–∞–ø—É—Å–∫ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ ===
def run_component(name: str, cmd: list[str]):
    print(f"‚ñ∂Ô∏è  {name}: {' '.join(cmd)}")
    return subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)


# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def start_all():
    base_dir = Path(__file__).resolve().parent
    cfg_path = base_dir / "src/simulator/config.yaml"
    cfg = yaml.safe_load(cfg_path.read_text())

    ensure_mqtt()

    # 1Ô∏è‚É£ –ó–∞–ø—É—Å–∫ PX4 –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ MAVLink
    procs = await start_px4_instances(cfg)

    # 2Ô∏è‚É£ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MAVSDK –∫–æ –≤—Å–µ–º PX4
    print("\nüïπÔ∏è  –ü–æ–¥–∫–ª—é—á–∞–µ–º MAVSDK –∫–æ –≤—Å–µ–º PX4-–¥—Ä–æ–Ω–∞–º...")
    tasks = []
    for d in cfg["drones"]:
        port = d["mavlink_out"]
        tasks.append(connect_to_px4(d["id"], port, timeout=120))

    # –∂–¥—ë–º, –ø–æ–∫–∞ –≤—Å–µ –¥—Ä–æ–Ω—ã –ø–æ–¥–∫–ª—é—á–∞—Ç—Å—è
    drones = await asyncio.gather(*tasks)
    print("‚úÖ –í—Å–µ MAVSDK-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

    # 3Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    print("‚ñ∂Ô∏è  Telemetry Ingest: python -m drone_core.workers.telemetry_ingest")
    telemetry = run_component("Telemetry Ingest", ["python", "-m", "drone_core.workers.telemetry_ingest"])

    print("‚ñ∂Ô∏è  Orchestrator: python -m drone_core.workers.orchestrator")
    orchestrator = run_component("Orchestrator", ["python", "-m", "drone_core.workers.orchestrator"])

    print("‚ñ∂Ô∏è  Web UI: uvicorn web_ui.main:app --port 8000")
    web_ui = run_component("Web UI", ["uvicorn", "web_ui.main:app", "--port", "8000"])

    print("\nüöÄ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã!")
    print("–û—Ç–∫—Ä–æ–π UI ‚Üí http://127.0.0.1:8000/static/index.html")

    try:
        while True:
            await asyncio.sleep(1)
    except KeyboardInterrupt:
        print("\nüßπ –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...")
    finally:
        all_procs = [telemetry, orchestrator, web_ui, *procs]
        for p in all_procs:
            if p and p.poll() is None:
                p.terminate()
        time.sleep(2)
        for p in all_procs:
            if p and p.poll() is None:
                p.kill()
        os.system("pkill -f px4 > /dev/null 2>&1")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –≤—Å–µ PX4-–ø—Ä–æ—Ü–µ—Å—Å—ã —É–±–∏—Ç—ã.")


if __name__ == "__main__":
    asyncio.run(start_all())
